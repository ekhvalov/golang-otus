// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/ekhvalov/hw12_13_14_15_calendar/internal/app (interfaces: Application)

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	command "github.com/ekhvalov/hw12_13_14_15_calendar/internal/app/event/command"
	query "github.com/ekhvalov/hw12_13_14_15_calendar/internal/app/event/query"
	gomock "github.com/golang/mock/gomock"
)

// MockApplication is a mock of Application interface.
type MockApplication struct {
	ctrl     *gomock.Controller
	recorder *MockApplicationMockRecorder
}

// MockApplicationMockRecorder is the mock recorder for MockApplication.
type MockApplicationMockRecorder struct {
	mock *MockApplication
}

// NewMockApplication creates a new mock instance.
func NewMockApplication(ctrl *gomock.Controller) *MockApplication {
	mock := &MockApplication{ctrl: ctrl}
	mock.recorder = &MockApplicationMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockApplication) EXPECT() *MockApplicationMockRecorder {
	return m.recorder
}

// CreateEvent mocks base method.
func (m *MockApplication) CreateEvent(arg0 command.CreateEventRequest) (*command.CreateEventResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateEvent", arg0)
	ret0, _ := ret[0].(*command.CreateEventResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateEvent indicates an expected call of CreateEvent.
func (mr *MockApplicationMockRecorder) CreateEvent(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEvent", reflect.TypeOf((*MockApplication)(nil).CreateEvent), arg0)
}

// DeleteEvent mocks base method.
func (m *MockApplication) DeleteEvent(arg0 command.DeleteEventRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteEvent", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteEvent indicates an expected call of DeleteEvent.
func (mr *MockApplicationMockRecorder) DeleteEvent(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEvent", reflect.TypeOf((*MockApplication)(nil).DeleteEvent), arg0)
}

// GetDayEvents mocks base method.
func (m *MockApplication) GetDayEvents(arg0 query.GetDayEventsRequest) (*query.GetDayEventsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDayEvents", arg0)
	ret0, _ := ret[0].(*query.GetDayEventsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDayEvents indicates an expected call of GetDayEvents.
func (mr *MockApplicationMockRecorder) GetDayEvents(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDayEvents", reflect.TypeOf((*MockApplication)(nil).GetDayEvents), arg0)
}

// GetMonthEvents mocks base method.
func (m *MockApplication) GetMonthEvents(arg0 query.GetMonthEventsRequest) (*query.GetMonthEventsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMonthEvents", arg0)
	ret0, _ := ret[0].(*query.GetMonthEventsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMonthEvents indicates an expected call of GetMonthEvents.
func (mr *MockApplicationMockRecorder) GetMonthEvents(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMonthEvents", reflect.TypeOf((*MockApplication)(nil).GetMonthEvents), arg0)
}

// GetWeekEvents mocks base method.
func (m *MockApplication) GetWeekEvents(arg0 query.GetWeekEventsRequest) (*query.GetWeekEventsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWeekEvents", arg0)
	ret0, _ := ret[0].(*query.GetWeekEventsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWeekEvents indicates an expected call of GetWeekEvents.
func (mr *MockApplicationMockRecorder) GetWeekEvents(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWeekEvents", reflect.TypeOf((*MockApplication)(nil).GetWeekEvents), arg0)
}

// UpdateEvent mocks base method.
func (m *MockApplication) UpdateEvent(arg0 command.UpdateEventRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateEvent", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateEvent indicates an expected call of UpdateEvent.
func (mr *MockApplicationMockRecorder) UpdateEvent(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEvent", reflect.TypeOf((*MockApplication)(nil).UpdateEvent), arg0)
}
