// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/7RVS2/bPBD8K8R+3yEBBNtpgwLVLS8UubRB+rgEPjDiymYqkQy5TGoY+u8FScmv0E1S",
	"pDdB4u4MZ2ZXS6h0a7RCRQ7KJbhqji2PjxfWahsejNUGLUmMr1t0js8wPNLCIJTgyEo1g64rwOK9lxYF",
	"lDerg9NiOKhv77Ai6Aq4eEBFoQVvmi81lDdL+N9iDSX8N14TGvdsxp/xMVV0xS4dKZ5nIkWGxHSg4a7Q",
	"Sh3boPJtKBB8AQU8Iv6EAlqtaL7RYAApYEXriUiCU1RIoKusNCS1gjLBMUfcEgsn2IFX8hcj2aIj3ppD",
	"KKDWtuUEJUhFH45hhSoV4QxtgN1qmsfYfJchLrzl+fLz/gvTNeOKYex2IBVrpfKE7jDLSGmS9eIUa20z",
	"1z5ptVcUOvZNGGmWSph3aNltLGQ0xwSYxSBJzV5N08fimRwMp6I7Gyo8DUeolKrWMVsJGM54g0pwy64v",
	"vn5jJ1eXUMADWpd4HI0mo0ngqQ0qbiSU8H50NJpAAYbTPKZiHG8XH2cYUxMyEzlcCijhE1JKZCyyvEVC",
	"6+J0yIBx79GGYCreBkIm5XbzjmQ9Fv0Qh/5/Gqqt8HdhsnIgvVb7IbbtSO36jP9NvLtpAHNGK5dG6d1k",
	"8hTmGslKfEDHOGuki+FK4rJaW+YMVrKWKJhZXQ+cb1tuF0nnnapgnNEu48mVdmtTggro6FSLRThZaUXD",
	"HjOmkVUsG9+5NFkvs2G927bjGnTu8lq8Ce4GaG6iKoucUARhjt8SNf5UMqg/eCNFWj2YzgTgjznrowco",
	"+uUUF6l07Na7xY7PZ/EOTOFjv1eCyz5nsv+3Hr/W4Jwh3oi1Icf7TilNrNZeibfQ73uEHLTrimGBjZdS",
	"dKlzg+lHt63neXyfJL0837PNwlpc7xkpXrFlEvNYsrvxpy9X1PmqQudq3zQLlq6yuynSRVZ/wmBh9zsA",
	"AP//kH0vkjMJAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
